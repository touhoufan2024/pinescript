//@version=5
strategy("止损前移操作", overlay=true, pyramiding = 10)


enableFilter = input(false,  "Enable Backtesting Range Filtering")
fromDate     = input.time(timestamp("20 Jan 2023 00:00 +0300"), "Start Date")
toDate       = input.time(timestamp("20 Jan 2025 00:00 +0300"), "End Date")

tradeDateIsAllowed = not enableFilter or (time >= fromDate and time <= toDate)


profit_count = 4  // 分批止盈次数
// 每次 止盈 的 比例
profit_p = 0.4


import marspumpkin/hashmaps/5
// 定义哈希表
var hashmap = array.new_string(10000)

// 定义vector 表示 每个止盈的 百分比
profit_vector = array.new_float(profit_count + 1,0)

var float qtyPercentSum = 0
var float qtyPercent = 0

array.set(profit_vector, 0, 0)


// 算出 每个仓位的 percent
qtyPercentSum := 0
for i = 1 to profit_count
    if i == profit_count  // 最后一组
        qtyPercent := 100 - qtyPercentSum
    else                  // 非最后一组
        qtyPercent := (100 - qtyPercentSum) * profit_p
        qtyPercentSum := (qtyPercentSum + qtyPercent)
    array.set(profit_vector, i, float(qtyPercent))



// for i = 1 to profit_count
//     log.error("{0}  {1}", str.tostring(i), str.tostring(array.get(profit_vector, i)))



var int long_count = 0  // long id 计数
var long_id = ""

longCond = ta.crossover(close, ta.sma(close, 50)) and tradeDateIsAllowed
bgcolor(   longCond ? color.new(color.green, 80) : na)




// 开仓时 就弄好了.
// 进场条件：收盘价向上穿过50周期均线时开多头头寸
if longCond
    long_count := long_count + 1
    long_id := "long" + str.tostring(long_count)

    // 开多头头寸
    myqty = 100
    strategy.entry(long_id, strategy.long, qty = myqty, comment = long_id + "_" + str.tostring(close) + "_" + str.tostring(myqty))




// 查看是否 开仓成功, 查看仓位是否发生变化
// 这里 大部分情况下 都可以 确认开仓的成功, 但是 还是会出现少许失误, 所以我决定
if (strategy.opentrades == (strategy.opentrades[1] + 1))
    // 入场价 应该是 开盘价, 也就是 上一条的 收盘价, 使用 close[1]

    // 自动循环设置exit 并设置哈希表
    // qtyPercentSum := 0
    for i = 1 to profit_count
        mylimit = close[1] * (1 + 0.02 * i)
        mystop = close[1] * 0.98
        exit_id = long_id + "-exit" + str.tostring(i)
        my_perfit = array.get(profit_vector, i)
        strategy.exit(exit_id, from_entry=long_id, qty_percent=my_perfit, limit=mylimit, stop=mystop)
        log.error("添加哈希表 {0}  percent {1}  limit {2}  stop {3}  entry{4}", exit_id, my_perfit, mylimit, mystop, close[1])
        hashmaps.put(hashmap, exit_id, '0')




// 实时更新, 如果 需要 移动止损, 从这里下手更改
if (strategy.position_size > 0) and tradeDateIsAllowed and 1
    // log.info("***start**** size: {0} entry_name: {1} avg_price: {2}", str.tostring(strategy.position_size), strategy.position_entry_name, str.tostring(strategy.position_avg_price))
    // log.info("当前价格 {0}", str.tostring(close))
    // 遍历 所有 打开的仓位

    // log.warning("start print hashmap")
    // for j = 0 to 10000 - 1
    //     if not na(array.get(hashmap, j))
    //         log.warning("**print array {0}", array.get(hashmap, j))

    // log.warning("end print hashmap")

    if strategy.opentrades > 0
        for i = 0 to strategy.opentrades - 1
            long_id = strategy.opentrades.entry_id(i)
            long_entry_price = strategy.opentrades.entry_price(i)
            long_qty = strategy.opentrades.size(i)
            profit = strategy.opentrades.profit_percent(i)
            max_down = strategy.opentrades.max_drawdown_percent(i)


            // 改为自动版的, 需要自动循环5次, 分别遍历 了 exit1, 2, 3, 4, 5
            for j = 1 to profit_count
                j_limit = long_entry_price * (1 + 0.02 * j)
                stop = long_entry_price * 0.98
                exit_id = strategy.position_entry_name + "-exit" + str.tostring(j)
                if (close >=  j_limit) and not na(hashmaps.get(hashmap, exit_id))
                    log.error("遍历 {0}  close {1} >=  j_limit {2}", exit_id, close, j_limit)
                    //如果 exit1 被执行, 那么要遍历 2 3 4 5
                    for k = (j + 1) to profit_count
                        if k <= profit_count
                            k_exit_id = strategy.position_entry_name + "-exit" + str.tostring(k)
                            k_limit = long_entry_price * (1 + 0.02 * k)
                            kk_limit = long_entry_price * (1 + 0.02 * j)
                            // if k == profit_count
                            //     strategy.exit(k_exit_id, from_entry=long_id, qty_percent=array.get(profit_vector, k) * 1.1, limit=k_limit, stop=kk_limit)
                            // else
                            strategy.exit(k_exit_id, from_entry=long_id, qty_percent=array.get(profit_vector, k), limit=k_limit, stop=kk_limit)
                            log.error("重新设定 {0}  percent {1} limit {2}  stop {3}", k_exit_id, array.get(profit_vector, k), k_limit, kk_limit)
                    hashmaps.remove(hashmap, exit_id)
                    log.error("移除哈希表 {0}", exit_id)



