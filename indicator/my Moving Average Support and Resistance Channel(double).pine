// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Best_Solve

//@version=5
indicator(title='my Moving Average Support and Resistance Channel', shorttitle='my double MA Channel', format=format.price, precision=8, overlay=true)
mode = input.string(defval='User Defined', title='Mode', options=['Auto', 'User Defined'])
smoothing = input.string(defval='VWMA', title='Smoothing', options=['SMA', 'EMA', 'RMA', 'WMA', 'VWMA', 'HMA'])
length = input.int(200, minval=1, title='Length')
x1 = input.float(5, '大Factor', minval=0.001, maxval=9)
x2 = input.float(3.65, '小Factor', minval=0.001, maxval=9)
HTFp = timeframe.period == '1' ? 60 : timeframe.period == '3' ? 20 : timeframe.period == '5' ? 48 : timeframe.period == '15' ? 96 : timeframe.period == '30' ? 48 : timeframe.period == '45' ? 32 : timeframe.period == '60' ? 24 : timeframe.period == '120' ? 84 : timeframe.period == '180' ? 56 : timeframe.period == '240' ? 42 : timeframe.period == 'D' ? 30 : timeframe.period == 'W' ? 52 : 12

len = mode == 'Auto' ? HTFp : length

ma_function(source, length) =>
    if smoothing == 'SMA'
        ta.sma(source, len)
    else
        if smoothing == 'EMA'
            ta.ema(source, len)
        else
            if smoothing == 'RMA'
                ta.rma(source, len)
            else
                if smoothing == 'WMA'
                    ta.wma(source, len)
                else
                    if smoothing == 'VWMA'
                        ta.vwma(source, len)
                    else
                        ta.hma(source, len)

// 拿到 高点和低点
serie1 = close > open ? close : close < open ? open : high
// 如果是绿线,  就拿到 close,  如果是红线,  就拿到 open,  如果 open == close, 就拿到 高点, 总之, 拿到高点
serie2 = close < open ? close : close > open ? open : low
// 拿到低点

// x表示 1.618 黄金比例 系数

big_bottom = ma_function(serie1, len) - x1 * ma_function(ta.tr(true), len)
big_top = ma_function(serie2, len) + x1 * ma_function(ta.tr(true), len)

big_bottom1 = big_bottom - x1 * ma_function(ta.tr(true), len)
big_top1 = big_top + x1 * ma_function(ta.tr(true), len)


small_bottom = ma_function(serie1, len) - x2 * ma_function(ta.tr(true), len)
small_top = ma_function(serie2, len) + x2 * ma_function(ta.tr(true), len)

small_bottom1 = small_bottom - x2 * ma_function(ta.tr(true), len)
small_top1 = small_top + x2 * ma_function(ta.tr(true), len)

// 中线, 某个 平均值 的 ma
basis = ma_function(hlc3, len)


plot(big_top1, '大top1', color = color.blue)       // 1
plot(big_top, '大top0', color= color.red)          // 3
plot(big_bottom, '大bottom0', color= color.green)  // 8
plot(big_bottom1, '大bottom1', color.aqua)         //9
plot(basis, 'Middle Line', color=color.yellow)    // 5
plot(small_top1, '小top1', color = color.purple)  // 2
plot(small_top, '小top0', color=color.navy)       // 4
plot(small_bottom, '小bottom0', color=color.lime)   // 6
plot(small_bottom1, '小bottom1', color = color.teal)  // 7


// 将 series float 数据存储在数组中
float[] seriesArray = array.new_float()
array.push(seriesArray, big_top1)
array.push(seriesArray, big_top)
array.push(seriesArray, big_bottom)
array.push(seriesArray, big_bottom1)
array.push(seriesArray, basis)
array.push(seriesArray, small_top1)
array.push(seriesArray, small_top)
array.push(seriesArray, small_bottom)
array.push(seriesArray, small_bottom1)

array.sort(seriesArray, order.descending)


log.error("*************srtart**************")
for i = 0 to 8
    log.info("{0}:  {1}", i, array.get(seriesArray, i))
log.error("*************end*************")


// 打印编号
for i = 0 to 8
    if barstate.islastconfirmedhistory
        label.new(bar_index + 2 , array.get(seriesArray, i), text = str.tostring(i + 1), style = label.style_label_right, color = color.white)

